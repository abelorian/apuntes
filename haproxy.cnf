##
# This config file was first taken from https://gist.github.com/nateware/3987720
# This config file is a combination of ideas from:
#   http://www.37signals.com/svn/posts/1073-nuts-bolts-haproxy
#   http://www.igvita.com/2008/05/13/load-balancing-qos-with-haproxy/
#   http://wiki.railsmachine.com/HAProxy
#   http://elwoodicious.com/2008/07/15/nginx-haproxy-thin-fastcgi-php5-load-balanced-rails-with-php-support/
#   http://upstream-berlin.com/2008/01/09/using-haproxy-with-multiple-backends-aka-content-switching/
#   http://wiki.railsmachine.com/HAProxy
#   http://gist.github.com/raw/25482/d39fb332edf977602c183194a1cf5e9a0b5264f9

global
  # maximum number of simultaneous active connections
  maxconn 50000
  nbproc 1

  # run in the background (duh)
  daemon
  user  haproxy
  group haproxy

  # for restarts
  pidfile /var/run/haproxy.pid

  # Logging to syslog facility local0
  log   127.0.0.1       local0
  stats socket /var/run/haproxy.stat mode 777

  # Distribute the health checks with a bit of randomness
  spread-checks 5

  # Uncomment the statement below to turn on verbose logging
  debug

# Settings in the defaults section apply to all services (unless you change it,
# this configuration defines one service, called rails).
defaults

  # apply log settings from the global section above to services
  log global

  # Proxy incoming traffic as HTTP requests
  mode http

  balance roundrobin
  maxconn 25000

  # Log details about HTTP requests
  option httplog

  # Abort request if client closes its output channel while waiting for the
  # request. HAProxy documentation has a long explanation for this option.
  option abortonclose

  # If sending a request to one server fails, try to send it to another, 3 times
  # before aborting the request
  retries 3

  # Do not enforce session affinity (i.e., an HTTP session can be served by
  # any Mongrel, not just the one that started the session
  option redispatch

  # Keep timeouts at web speed, since this balancer sits in front of everything
  # Backends will force timeout faster if needed.
  timeout client  35s
  timeout connect 50s
  timeout server  50s

  # For the frontend balancer, check the health of haproxy monitor URL.
  # This avoids a double-check; haproxy will say 503 if backends are 503
  #option httpchk HEAD /haproxy?monitor HTTP/1.0

  # Amount of time after which a health check is considered to have timed out
  timeout check 30s

frontend application
  bind 127.0.0.1:8080
  mode http

  #acl api_url hdr_dom(host) -i api.welcu.com
  #acl url_css path_end .css .woff .png .svg .jpg
  #acl server6 path_beg -i /manage/admina /assets/admin/ /assets/i18n/ /private/sendgrid

  #use_backend cluster3 if server6
  #use_backend welcu_round_robin if api_url || url_css
  #default_backend welcu_by_ip
  default_backend welcu_round_robin

backend welcu_round_robin
  mode http
  balance leastconn
  hash-type consistent
  option forwardfor

  option httpchk GET /heartbeat

  server web1 10.128.118.159:80 maxconn 2000 check cookie web1 inter 6s rise 3 fall 3
  server web2 10.128.122.235:80 maxconn 2000 check cookie web2 inter 6s rise 3 fall 3
  server web3 10.128.112.103:80 maxconn 2000 check cookie web3 inter 6s rise 3 fall 3
  server web4 10.128.96.180:80 maxconn 2000 check cookie web4 inter 6s rise 3 fall 3
  server web5 10.128.75.44:80 maxconn 2000 check cookie web5 inter 6s rise 3 fall 3
  server web6 10.128.125.65:80 maxconn 2000 check cookie web5 inter 6s rise 3 fall 3

#backend cluster3
#  mode http
#  option httpchk GET /heartbeat
#  server web6 10.128.125.65:80 maxconn 500 check cookie web6 inter 6s rise 3 fall 3


#backend welcu_by_ip
#  mode http
#  balance hdr(X-Real-IP)
#  hash-type consistent
#  option forwardfor
#  option httpchk GET /heartbeat

#  server web1 10.128.118.159:80 maxconn 120 check cookie web1 inter 5s rise 3 fall 3
#  server web2 10.128.122.235:80 maxconn 120 check cookie web2 inter 5s rise 3 fall 3
#  server web3 10.128.112.103:80 maxconn 120 check cookie web3 inter 5s rise 3 fall 3
#  server web4 10.128.96.180:80 maxconn 120 check cookie web4 inter 5s rise 3 fall 3
#  server web5 10.128.75.44:80 maxconn 120 check cookie web5 inter 5s rise 3 fall 3


listen stats 127.0.0.1:8088
  # Enable the statistics page
  stats enable
  stats uri     /haproxy
  stats realm   Haproxy\ Statistics
  stats refresh 5s
